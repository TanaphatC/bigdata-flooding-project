{"paragraphs":[{"title":"1.1) Hourly rainfall rate dataset importing from HUE","text":"%pyspark\r\nhourlyData = spark.read.csv(\"/user/zeppelin/flooding_data/rainfall_hourly_data2.csv\", header=True, inferSchema=True)","user":"anonymous","dateUpdated":"2020-11-07T04:09:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=242","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=243"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1602925411281_1573475665","id":"20201017-090331_940034940","dateCreated":"2020-10-17T09:03:31+0000","dateStarted":"2020-11-07T04:09:40+0000","dateFinished":"2020-11-07T04:09:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"title":"1.2) Hourly water level rate dataset importing from HUE","text":"%pyspark\nfrom pyspark.sql.functions import lit\n\nwaterLevelBKK001DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK001.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK001\"))\nwaterLevelBKK003DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK003.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK003\"))\nwaterLevelBKK004DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK004.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK004\"))\nwaterLevelBKK005DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK005.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK005\"))\nwaterLevelBKK008DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK008.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK008\"))\nwaterLevelBKK009DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK009.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK009\"))\nwaterLevelBKK020DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK020.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK020\"))\nwaterLevelBKK021DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_BKK021.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"BKK021\"))\nwaterLevelCPY015DF = spark.read.csv(\"/user/zeppelin/flooding_data/water_level_station_CPY015.csv\", header=True, inferSchema=True).withColumn(\"station\", lit(\"CPY015\"))","user":"anonymous","dateUpdated":"2020-11-07T04:09:46+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=244","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=245","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=246","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=247","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=248","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=249","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=250","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=251","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=252","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=253","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=254","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=255","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=256","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=257","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=258","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=259","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=260","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=261"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1604220295277_774090316","id":"20201101-084455_903609208","dateCreated":"2020-11-01T08:44:55+0000","dateStarted":"2020-11-07T04:09:46+0000","dateFinished":"2020-11-07T04:10:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"title":"2.1) Data Preprocessing - Filter only Bangkok","text":"%pyspark\n#filter only \"Bangkok\" province and assign to valiable 'bangkokHourlyData'\nbangkokHourlyData = hourlyData.filter(hourlyData['province_name_en']==\"Bangkok\").select(hourlyData['province_name_en'], hourlyData['district'], hourlyData['sub_district'], hourlyData['date'],  hourlyData['H01'], hourlyData['H02'], hourlyData['H03'], hourlyData['H04'], hourlyData['H05'], hourlyData['H06'], hourlyData['H07'], hourlyData['H08'], hourlyData['H09'], hourlyData['H10'], hourlyData['H11'], hourlyData['H12'], hourlyData['H13'], hourlyData['H14'], hourlyData['H15'], hourlyData['H16'], hourlyData['H17'], hourlyData['H18'], hourlyData['H19'], hourlyData['H20'], hourlyData['H21'], hourlyData['H22'], hourlyData['H23'], hourlyData['H24'])\n","user":"anonymous","dateUpdated":"2020-11-07T04:10:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"province_name_en","visible":true,"width":"*","sort":{"direction":"asc","priority":0},"filters":[{}],"pinned":""},{"name":"district","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"sub_district","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"date","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H01","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H02","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H03","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H04","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H05","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H06","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H07","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H08","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H09","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H10","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H11","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H12","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H13","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H14","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H15","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H16","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H17","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H18","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H19","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H20","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H21","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H22","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H23","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"H24","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[{"field":"province_name_en","groupPriority":0,"colName":"province_name_en"}],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"province_name_en":"string","district":"string","sub_district":"string","date":"string","H01":"string","H02":"string","H03":"string","H04":"string","H05":"string","H06":"string","H07":"string","H08":"string","H09":"string","H10":"string","H11":"string","H12":"string","H13":"string","H14":"string","H15":"string","H16":"string","H17":"string","H18":"string","H19":"string","H20":"string","H21":"string","H22":"string","H23":"string","H24":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"province_name_en":"string","district":"string","sub_district":"string","date":"string","H01":"string","H02":"string","H03":"string","H04":"string","H05":"string","H06":"string","H07":"string","H08":"string","H09":"string","H10":"string","H11":"string","H12":"string","H13":"string","H14":"string","H15":"string","H16":"string","H17":"string","H18":"string","H19":"string","H20":"string","H21":"string","H22":"string","H23":"string","H24":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1602925420895_-1295208824","id":"20201017-090340_1507830950","dateCreated":"2020-10-17T09:03:40+0000","dateStarted":"2020-11-07T04:10:09+0000","dateFinished":"2020-11-07T04:10:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"title":"2.2) Missing Value (Statistical value of known data): calculate average rainy rate of each that day","text":"%pyspark\n#calculate the number of rainy hours on that day. (rainy hour = 24 - dry hour)\nimport datetime\n\nrainyHourArray = []\n\nclass RainyHour:\n    \n    def __init__(self, district, subDistrict, date, totalRainyHour, summaryRainyRate):\n        self.key = str(abs(hash(district+subDistrict)))\n        self.location = str(district + \"/\" + subDistrict)\n        self.day = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().day)\n        self.month = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().month)\n        self.year = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().year)\n        self.totalRainyHour = totalRainyHour\n        self.summaryRainyRate = summaryRainyRate\n        self.averageRainyRate = self.calAvg()\n    \n    def info(self):\n        return (self.key, self.location, self.day, self.month, self.year, self.totalRainyHour, self.summaryRainyRate, self.averageRainyRate)\n    \n    def calAvg(self):\n        if self.totalRainyHour!=0 and self.summaryRainyRate>0.0: \n            return round(self.summaryRainyRate / self.totalRainyHour, 2)\n        else:\n            return 0\n\ndef calculateRainyHour(row):\n    rainyHour=24\n    summaryRainyRate = 0.0\n    \n    for i in range(1, 25):\n        colName= \"H0\"+str(i) if i<=9 else \"H\"+str(i)\n        \n        if row[colName]!=\"NULL\" and float(row[colName])==0.0:\n            rainyHour-=1\n\n        if row[colName]!=\"NULL\" : summaryRainyRate+=float(row[colName])\n            \n    return RainyHour(row['district'], row['sub_district'], row['date'], rainyHour, summaryRainyRate)\n\n\nfor row in bangkokHourlyData.rdd.collect():\n    r = calculateRainyHour(row)\n    rainyHourArray.append(r.info())\n\ndef getAvgRainyRateByLocationAndDate(district, subDistrict, date):\n    row = 0.0\n    keyIn = str(abs(hash(district+subDistrict)))\n    dayIn = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().day)\n    monthIn = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().month)\n    yearIn = str(datetime.datetime.strptime(date, \"%d/%m/%Y\").date().year)\n    \n    for r in rainyHourArray:\n        if r[0]==keyIn and r[2]==dayIn and r[3]==monthIn and r[4]==yearIn:\n            row =  r[7]\n    \n    return row\n    ","user":"anonymous","dateUpdated":"2020-11-07T04:10:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":true,"setting":{"table":{"tableGridState":{"columns":[{"name":"Key","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Location","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Date","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"NumberOfRainyHour","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Key":"string","Location":"string","Date":"string","NumberOfRainyHour":"number"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"scatterChart":{"yAxis":{"name":"NumberOfRainyHour","index":3,"aggr":"sum"},"size":{"name":"Location","index":1,"aggr":"sum"},"xAxis":{"name":"Location","index":1,"aggr":"sum"}},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"Key","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"Location","index":1,"aggr":"sum"}]},"helium":{}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Key","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Location","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Date","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"NumberOfRainyHour","visible":true,"width":"*","sort":{"priority":0,"direction":"asc"},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Key":"string","Location":"string","Date":"string","NumberOfRainyHour":"number"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"Key","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"Location","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=262"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1603029858134_-1147608560","id":"20201018-140418_1176902503","dateCreated":"2020-10-18T14:04:18+0000","dateStarted":"2020-11-07T04:10:09+0000","dateFinished":"2020-11-07T04:10:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"title":"2.3) Missing value (Statistical value of known data) - Replace NULL with average rainy rate of each that day","text":"%pyspark\ndef replaceNullWithAvg(row):\n    avgRainyRate = getAvgRainyRateByLocationAndDate(row['district'], row['sub_district'], row['date'])\n    return (\n        float(avgRainyRate if row['H01']==\"NULL\" else row['H01']),\n        float(avgRainyRate if row['H02']==\"NULL\" else row['H02']),\n        float(avgRainyRate if row['H03']==\"NULL\" else row['H03']),\n        float(avgRainyRate if row['H04']==\"NULL\" else row['H04']),\n        float(avgRainyRate if row['H05']==\"NULL\" else row['H05']),\n        float(avgRainyRate if row['H06']==\"NULL\" else row['H06']),\n        float(avgRainyRate if row['H07']==\"NULL\" else row['H07']),\n        float(avgRainyRate if row['H08']==\"NULL\" else row['H08']),\n        float(avgRainyRate if row['H09']==\"NULL\" else row['H09']),\n        float(avgRainyRate if row['H10']==\"NULL\" else row['H10']),\n        float(avgRainyRate if row['H11']==\"NULL\" else row['H11']),\n        float(avgRainyRate if row['H12']==\"NULL\" else row['H12']),\n        float(avgRainyRate if row['H13']==\"NULL\" else row['H13']),\n        float(avgRainyRate if row['H14']==\"NULL\" else row['H14']),\n        float(avgRainyRate if row['H15']==\"NULL\" else row['H15']),\n        float(avgRainyRate if row['H16']==\"NULL\" else row['H16']),\n        float(avgRainyRate if row['H17']==\"NULL\" else row['H17']),\n        float(avgRainyRate if row['H18']==\"NULL\" else row['H18']),\n        float(avgRainyRate if row['H19']==\"NULL\" else row['H19']),\n        float(avgRainyRate if row['H20']==\"NULL\" else row['H20']),\n        float(avgRainyRate if row['H21']==\"NULL\" else row['H21']),\n        float(avgRainyRate if row['H22']==\"NULL\" else row['H22']),\n        float(avgRainyRate if row['H23']==\"NULL\" else row['H23']),\n        float(avgRainyRate if row['H24']==\"NULL\" else row['H24'])\n    )\n\ndef extract(row):\n    rowDate = row['date']\n    day = str(datetime.datetime.strptime(rowDate, \"%d/%m/%Y\").date().day)\n    month = str(datetime.datetime.strptime(rowDate, \"%d/%m/%Y\").date().month)\n    year = str(datetime.datetime.strptime(rowDate, \"%d/%m/%Y\").date().year)\n    \n    return (\n        row['district'] + \"/\" + row['sub_district'], day, month, year, replaceNullWithAvg(row)\n    )\n\n\ncleanDF=bangkokHourlyData.rdd.map(extract).toDF(['Location','Day','Month', 'Year', 'RainyRates'])\n","user":"anonymous","dateUpdated":"2020-11-07T04:10:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":true,"setting":{"table":{"tableGridState":{"columns":[{"name":"Location","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Day","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Month","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Year","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"RainyHours","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Location":"string","Day":"string","Month":"string","Year":"string","RainyHours":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false},"scatterChart":{"xAxis":{"name":"Location","index":0,"aggr":"sum"}}},"keys":[{"name":"Location","index":0,"aggr":"sum"}],"groups":[{"name":"Month","index":2,"aggr":"sum"}],"values":[{"name":"RainyHours","index":4,"aggr":"sum"}],"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=263"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1603523563777_1375166502","id":"20201024-071243_435153083","dateCreated":"2020-10-24T07:12:43+0000","dateStarted":"2020-11-07T04:10:13+0000","dateFinished":"2020-11-07T04:10:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"title":"2.4) Missing value - Check rainy rate since 01:00 till 24:00 should not be NULL","text":"%pyspark\nfor row in cleanDF.rdd.collect():\n    hourRow = row['RainyRates']\n    for i in range(0, 23):\n        assert \"True\" == str((hourRow[i] != \"NULL\"))","user":"anonymous","dateUpdated":"2020-11-07T04:10:14+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=264"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1603611944566_-1555939565","id":"20201025-074544_914445690","dateCreated":"2020-10-25T07:45:44+0000","dateStarted":"2020-11-07T04:10:14+0000","dateFinished":"2020-11-07T04:10:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"title":"2.5) Preprocessing - Extract calendar column to day, month, year column on water-level dataset","text":"%pyspark\nimport datetime\nfrom pyspark.sql import Row\n\nmonthsArray = [\"none\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\ndef extract(row):\n    rowDate = str(row['date'])[:10]\n    day = str(datetime.datetime.strptime(rowDate, \"%Y-%m-%d\").date().day)\n    month = int(datetime.datetime.strptime(rowDate, \"%Y-%m-%d\").date().month)\n    year = str(datetime.datetime.strptime(rowDate, \"%Y-%m-%d\").date().year)\n    \n    return (\n        row['station'], day, month, monthsArray[(month)], year, row['time'], float(row['water_lv'])\n    )\n   \nwaterLevelBKK001ExtractDF = waterLevelBKK001DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK003ExtractDF = waterLevelBKK003DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK004ExtractDF = waterLevelBKK004DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK005ExtractDF = waterLevelBKK005DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK008ExtractDF = waterLevelBKK008DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK009ExtractDF = waterLevelBKK009DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK020ExtractDF = waterLevelBKK020DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelBKK021ExtractDF = waterLevelBKK021DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])\nwaterLevelCPY015ExtractDF = waterLevelCPY015DF.rdd.map(extract).toDF(['Station', 'Day','Month', 'MonthName','Year', 'Time', 'WaterLavel'])","user":"anonymous","dateUpdated":"2020-11-07T04:10:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=265","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=266","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=267","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=268","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=269","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=270","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=271","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=272","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=273"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1604223467973_563099537","id":"20201101-093747_766830479","dateCreated":"2020-11-01T09:37:47+0000","dateStarted":"2020-11-07T04:10:17+0000","dateFinished":"2020-11-07T04:10:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"title":"2.6) Cleansing Data - Replease abnormal value -999 of water-level","text":"%pyspark\nfrom pyspark.sql import Row\n\ndef replaseAbnormalWaterLevel(row):\n    waterLv = row['WaterLavel'] \n    if float(row['WaterLavel'])==float(-999):\n        waterLv = 0.0\n    return (\n        row['Station'], row['Day'], row['Month'] ,row['MonthName'], row['Year'], row['Time'], waterLv\n    )\n\nwaterLevelBKK001CleanDF = waterLevelBKK001ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station', 'Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK003CleanDF = waterLevelBKK003ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK004CleanDF = waterLevelBKK004ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK005CleanDF = waterLevelBKK005ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK008CleanDF = waterLevelBKK008ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK009CleanDF = waterLevelBKK009ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK020CleanDF = waterLevelBKK020ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelBKK021CleanDF = waterLevelBKK021ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\nwaterLevelCPY015CleanDF = waterLevelCPY015ExtractDF.rdd.map(replaseAbnormalWaterLevel).toDF(['Station','Day','Month', 'MonthName', 'Year', 'Time', 'WaterLavel'])\n","user":"anonymous","dateUpdated":"2020-11-07T04:10:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Day":"string","Month":"string","MonthName":"string","Year":"string","Time":"string","WaterLavel":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=274","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=275","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=276","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=277","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=278","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=279","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=280","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=281","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=282"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1604658398055_1755192589","id":"20201106-102638_1559502730","dateCreated":"2020-11-06T10:26:38+0000","dateStarted":"2020-11-07T04:10:19+0000","dateFinished":"2020-11-07T04:10:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"title":"3.1) Mapping - Finding summary and average rainy rate each that day","text":"%pyspark\n\nmonthsArray = [\"none\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\ndef summaryRainyRate(row):\n    summaryRate = 0.0\n    hourRow = row['RainyRates']\n    result = [row['Location'], row['Day'], str(row['Month']), monthsArray[int(row['Month'])], row['Year'], row['RainyRates'], ]\n    for i in range(0, 23):\n        summaryRate+=hourRow[i]\n    result.append(round(float(summaryRate), 2))\n    return result\n    \nsummaryDF = cleanDF.rdd.map(summaryRainyRate).toDF([\"Location\",\"Day\", \"MonthNo\", \"MonthName\" ,\"Year\",\"RainyRate\", \"DayRainyRate\"]).sort('DayRainyRate', ascending=False)\nsummaryDF.show()\n","user":"anonymous","dateUpdated":"2020-11-07T04:10:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Location":"string","Day":"string","Month":"string","Year":"string","RainyRate":"string","SummaryRainyRate":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+---+-------+---------+----+--------------------+------------+\n|            Location|Day|MonthNo|MonthName|Year|           RainyRate|DayRainyRate|\n+--------------------+---+-------+---------+----+--------------------+------------+\n|Khlong Sam Wa/Sam...|  1|      5|      May|2014|[0.0, 0.0, 2.13, ...|      113.21|\n|Nong Chok/Krathum...|  8|      5|      May|2014|[0.0, 0.0, 0.0, 3...|       61.06|\n|Lak Si/Thung Song...|  8|      5|      May|2014|[0.0, 4.54, 3.95,...|       58.82|\n| Bang Khen/Tha Raeng|  8|      5|      May|2014|[0.0, 0.0, 4.4, 2...|       58.12|\n| Bang Khen/Tha Raeng|  1|      5|      May|2014|[0.0, 0.0, 1.14, ...|       56.15|\n|Bang Khun Thian/S...|  1|      5|      May|2014|[0.0, 0.0, 4.67, ...|       56.01|\n|Lat Krabang/Lam P...|  1|      5|      May|2014|[0.0, 0.0, 0.0, 3...|       55.55|\n|Nong Chok/Khu Fan...|  8|      5|      May|2014|[0.0, 0.0, 0.0, 3...|       53.81|\n|   Bang Bon/Bang Bon|  8|      5|      May|2014|[3.34, 0.1, 0.72,...|       52.82|\n|     Prawet/Nong Bon|  8|      5|      May|2014|[3.88, 2.26, 4.72...|       52.53|\n|Bang Khun Thian/T...|  1|      5|      May|2014|[0.0, 0.0, 0.0, 2...|       51.51|\n|Phaya Thai/Sam Se...|  1|      5|      May|2014|[0.0, 0.0, 0.0, 4...|       51.07|\n|Khlong Sam Wa/Sam...|  8|      5|      May|2014|[0.0, 2.19, 0.61,...|        50.6|\n|Lak Si/Thung Song...|  1|      5|      May|2014|[0.0, 0.0, 0.28, ...|       49.84|\n|Khlong Toei/Khlon...| 28|      7|     July|2014|[0.0, 0.0, 0.0, 0...|        49.5|\n|Nong Chok/Krathum...|  1|      5|      May|2014|[0.0, 0.0, 0.0, 0...|       46.65|\n|   Bang Bon/Bang Bon|  1|      5|      May|2014|[0.0, 0.0, 4.17, ...|       42.91|\n|Khlong Toei/Khlon...| 22|      3|    March|2014|[0.0, 0.0, 0.0, 0...|        41.8|\n|Bang Khun Thian/S...|  8|      5|      May|2014|[0.0, 0.0, 0.0, 0...|       40.79|\n|Khlong Sam Wa/Sam...|  1|      5|      May|2014|[0.0, 0.0, 0.0, 1...|       40.65|\n+--------------------+---+-------+---------+----+--------------------+------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=283","http://hadoop-cluster-2020-msc-m.us-central1-f.c.meta-plateau-287204.internal:4040/jobs/job?id=284"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1603622037681_330666540","id":"20201025-103357_826461112","dateCreated":"2020-10-25T10:33:57+0000","dateStarted":"2020-11-07T04:10:23+0000","dateFinished":"2020-11-07T04:10:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"title":"4.1) Reduce - Summary rainy rate by month and year","text":"%pyspark\ngroupByMYDF = summaryDF.groupBy([\"Location\", \"MonthName\", \"MonthNo\", \"Year\"]).sum(\"DayRainyRate\")\nz.show(groupByMYDF)","user":"anonymous","dateUpdated":"2020-11-07T04:08:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"scatterChart","height":492,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Location":"string","MonthName":"string","MonthNo":"string","Year":"string","sum(DayRainyRate)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"scatterChart":{"xAxis":{"name":"MonthNo","index":2,"aggr":"sum"},"group":{"name":"Location","index":0,"aggr":"sum"},"yAxis":{"name":"sum(DayRainyRate)","index":4,"aggr":"sum"},"size":{"name":"sum(DayRainyRate)","index":4,"aggr":"sum"}},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"rotate","style":"stack"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"rotate","isDateFormat":false,"lineWithFocus":false,"forceY":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"rotate","stacked":true},"pieChart":{}},"keys":[{"name":"Location","index":0,"aggr":"sum"}],"groups":[{"name":"MonthNo","index":2,"aggr":"sum"},{"name":"MonthName","index":1,"aggr":"sum"}],"values":[{"name":"sum(DayRainyRate)","index":4,"aggr":"sum"}],"commonSetting":{}},"helium":{}},"1":{"graph":{"mode":"table","height":93,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1603624634837_-122743207","id":"20201025-111714_732506377","dateCreated":"2020-10-25T11:17:14+0000","dateStarted":"2020-11-06T09:52:17+0000","dateFinished":"2020-11-06T09:52:27+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"title":"4.2) Reduce - Find average of water-level dataset from 9 stations and union them all to one finally dataset.","text":"%pyspark\ndef reduceCleanWaterLevelData(waterlvDF):\n    return waterlvDF.filter(waterlvDF['Year']==\"2014\").groupBy([\"Station\"]).pivot(\"Month\").mean(\"WaterLavel\")\n\nwaterLevelBKK001SummaryDF = reduceCleanWaterLevelData(waterLevelBKK001CleanDF)\nwaterLevelBKK003SummaryDF = reduceCleanWaterLevelData(waterLevelBKK003CleanDF)\nwaterLevelBKK004SummaryDF = reduceCleanWaterLevelData(waterLevelBKK004CleanDF)\nwaterLevelBKK005SummaryDF = reduceCleanWaterLevelData(waterLevelBKK005CleanDF)\nwaterLevelBKK008SummaryDF = reduceCleanWaterLevelData(waterLevelBKK008CleanDF)\nwaterLevelBKK009SummaryDF = reduceCleanWaterLevelData(waterLevelBKK009CleanDF)\nwaterLevelBKK020SummaryDF = reduceCleanWaterLevelData(waterLevelBKK020CleanDF)\nwaterLevelBKK021SummaryDF = reduceCleanWaterLevelData(waterLevelBKK021CleanDF)\nwaterLevelCPY015SummaryDF = reduceCleanWaterLevelData(waterLevelCPY015CleanDF)\n\nwaterLevelFinalDF = waterLevelBKK001SummaryDF.union(waterLevelBKK003SummaryDF).union(waterLevelBKK004SummaryDF).union(waterLevelBKK005SummaryDF).union(waterLevelBKK008SummaryDF).union(waterLevelBKK009SummaryDF).union(waterLevelBKK020SummaryDF).union(waterLevelBKK021SummaryDF).union(waterLevelCPY015SummaryDF)\nz.show(waterLevelFinalDF)","user":"anonymous","dateUpdated":"2020-11-07T04:09:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1604121812257_1412141453","id":"20201031-052332_1465106584","dateCreated":"2020-10-31T05:23:32+0000","dateStarted":"2020-11-06T09:52:27+0000","dateFinished":"2020-11-06T09:52:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"title":"5) Outlier Detection","text":"%pyspark\nimport pyspark.sql.functions as F\nfrom pyspark.sql.types import StringType\n\nsummaryDF = groupByMYDF.select(\"sum(DayRainyRate)\").summary(\"min\", \"max\", \"25%\", \"75%\", \"mean\", \"stddev\")\nmin = float(summaryDF.collect()[0][1])\nmax = float(summaryDF.collect()[1][1])\nq1 = float(summaryDF.collect()[2][1])\nq3 = float(summaryDF.collect()[3][1])\nmean = float(summaryDF.collect()[4][1])\nsd = float(summaryDF.collect()[5][1])\nsummaryDF.show()\n\niqr = q3-q1\nupperB = q3+(1.5*iqr)\nlowerB = q1-(1.5*iqr)\nprint \"IQR: {}\".format(iqr)\nprint \"Upper Bound: {} / Lower Bound: {}\".format(upperB, lowerB)\n\ndef checkBoundary(sumRate):\n    if sumRate > upperB: \n        return 'upper bound'\n    elif sumRate < lowerB:\n        return 'lower bound'\n    else :\n        return 'normal'\n\ncheckBoundaryFunc = F.udf(checkBoundary, StringType())\n\nOutlierDF = groupByMYDF.withColumn(\"Outlier\", checkBoundaryFunc(\"sum(DayRainyRate)\"))\nz.show(OutlierDF)","user":"anonymous","dateUpdated":"2020-11-06T09:52:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Location":"string","Average_SummaryDayRainyRate":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Location","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""},{"name":"MonthName","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"MonthNo","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Year","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"sum(DayRainyRate)","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Outlier","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Location":"string","MonthName":"string","MonthNo":"string","Year":"string","sum(DayRainyRate)":"string","Outlier":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"scatterChart":{"xAxis":{"name":"Location","index":0,"aggr":"sum"},"yAxis":{"name":"Outlier","index":5,"aggr":"sum"},"group":{"name":"MonthName","index":1,"aggr":"sum"}},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"pieChart":{},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"rotate"}},"keys":[{"name":"Location","index":0,"aggr":"sum"}],"groups":[{"name":"MonthName","index":1,"aggr":"sum"}],"values":[{"name":"Outlier","index":5,"aggr":"sum"}],"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1603634178174_-1976633791","id":"20201025-135618_251945645","dateCreated":"2020-10-25T13:56:18+0000","dateStarted":"2020-11-06T09:52:38+0000","dateFinished":"2020-11-06T09:52:58+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:186"},{"text":"%pyspark\nstationDF = spark.createDataFrame(\n    [\n        (\"BKK001\", [\"4550004\", \"4550005\", \"4550006\", \"4550020\"]),\n        (\"BKK004\", [\"4550007\"]),\n        (\"BKK005\", [\"4550021\", \"4550024\", \"4550025\", \"4550026\"]),\n        (\"BKK008\", [\"4550003\", \"4550017\", \"4550018\", \"4550022\", \"4550027\"]),\n        (\"BKK009\", [\"4550002\", \"4550009\", \"4550012\", \"4550013\", \"4550014\", \"4550016\", \"4550019\", \"4550023\"]),\n        (\"BKK021\", [\"4550001\", \"4550008\", \"4550010\", \"4550011\"]),\n        (\"CPY015\", [\"4550015\", \"4550028\"])\n    ],\n    [\"station\", \"areas\"]\n)\n\ndef getStation(areaCode):\n    result = \"NULL\"\n    for row in stationDF.rdd.collect():\n        areas = row[\"areas\"]\n        if areaCode in areas:\n            result = row[\"station\"]\n    return result\n\nassert \"BKK001\" == getStation(\"4550004\")\nassert \"BKK021\" == getStation(\"4550008\")\nassert \"CPY015\" == getStation(\"4550028\")","user":"anonymous","dateUpdated":"2020-11-06T09:52:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1604126839422_418802832","id":"20201031-064719_143208149","dateCreated":"2020-10-31T06:47:19+0000","dateStarted":"2020-11-06T09:52:58+0000","dateFinished":"2020-11-06T09:52:59+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:187"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-11-06T09:52:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1604222799407_-1613039082","id":"20201101-092639_1103024339","dateCreated":"2020-11-01T09:26:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:188"}],"name":"flooding_project","id":"2FQA9YR6K","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}